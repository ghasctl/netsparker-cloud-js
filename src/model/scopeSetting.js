"use strict";
/**
 * Netsparker Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
* Represents a class that carries out scope settings.
*/
class ScopeSetting {
    static getAttributeTypeMap() {
        return ScopeSetting.attributeTypeMap;
    }
}
ScopeSetting.discriminator = undefined;
ScopeSetting.attributeTypeMap = [
    {
        "name": "excludedLinks",
        "baseName": "ExcludedLinks",
        "type": "Array<ExcludedLinkModel>"
    },
    {
        "name": "excludeLinks",
        "baseName": "ExcludeLinks",
        "type": "boolean"
    },
    {
        "name": "excludedUsageTrackers",
        "baseName": "ExcludedUsageTrackers",
        "type": "Array<ExcludedUsageTrackerModel>"
    },
    {
        "name": "excludeAuthenticationPages",
        "baseName": "ExcludeAuthenticationPages",
        "type": "boolean"
    },
    {
        "name": "disallowedHttpMethods",
        "baseName": "DisallowedHttpMethods",
        "type": "Array<ScopeSetting.DisallowedHttpMethodsEnum>"
    },
    {
        "name": "scope",
        "baseName": "Scope",
        "type": "ScopeSetting.ScopeEnum"
    },
    {
        "name": "doNotDifferentiateProtocols",
        "baseName": "DoNotDifferentiateProtocols",
        "type": "boolean"
    }
];
exports.ScopeSetting = ScopeSetting;
(function (ScopeSetting) {
    let DisallowedHttpMethodsEnum;
    (function (DisallowedHttpMethodsEnum) {
        DisallowedHttpMethodsEnum[DisallowedHttpMethodsEnum["Get"] = 'GET'] = "Get";
        DisallowedHttpMethodsEnum[DisallowedHttpMethodsEnum["Post"] = 'POST'] = "Post";
        DisallowedHttpMethodsEnum[DisallowedHttpMethodsEnum["Connect"] = 'CONNECT'] = "Connect";
        DisallowedHttpMethodsEnum[DisallowedHttpMethodsEnum["Head"] = 'HEAD'] = "Head";
        DisallowedHttpMethodsEnum[DisallowedHttpMethodsEnum["Trace"] = 'TRACE'] = "Trace";
        DisallowedHttpMethodsEnum[DisallowedHttpMethodsEnum["Debug"] = 'DEBUG'] = "Debug";
        DisallowedHttpMethodsEnum[DisallowedHttpMethodsEnum["Track"] = 'TRACK'] = "Track";
        DisallowedHttpMethodsEnum[DisallowedHttpMethodsEnum["Put"] = 'PUT'] = "Put";
        DisallowedHttpMethodsEnum[DisallowedHttpMethodsEnum["Options"] = 'OPTIONS'] = "Options";
        DisallowedHttpMethodsEnum[DisallowedHttpMethodsEnum["Delete"] = 'DELETE'] = "Delete";
        DisallowedHttpMethodsEnum[DisallowedHttpMethodsEnum["Link"] = 'LINK'] = "Link";
        DisallowedHttpMethodsEnum[DisallowedHttpMethodsEnum["Unlink"] = 'UNLINK'] = "Unlink";
        DisallowedHttpMethodsEnum[DisallowedHttpMethodsEnum["Patch"] = 'PATCH'] = "Patch";
    })(DisallowedHttpMethodsEnum = ScopeSetting.DisallowedHttpMethodsEnum || (ScopeSetting.DisallowedHttpMethodsEnum = {}));
    let ScopeEnum;
    (function (ScopeEnum) {
        ScopeEnum[ScopeEnum["EnteredPathAndBelow"] = 'EnteredPathAndBelow'] = "EnteredPathAndBelow";
        ScopeEnum[ScopeEnum["OnlyEnteredUrl"] = 'OnlyEnteredUrl'] = "OnlyEnteredUrl";
        ScopeEnum[ScopeEnum["WholeDomain"] = 'WholeDomain'] = "WholeDomain";
    })(ScopeEnum = ScopeSetting.ScopeEnum || (ScopeSetting.ScopeEnum = {}));
})(ScopeSetting = exports.ScopeSetting || (exports.ScopeSetting = {}));
//# sourceMappingURL=scopeSetting.js.map