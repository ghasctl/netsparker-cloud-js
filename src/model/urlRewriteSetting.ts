/**
 * Netsparker Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { UrlRewriteExcludedPathModel } from './urlRewriteExcludedPathModel';
import { UrlRewriteRuleModel } from './urlRewriteRuleModel';

/**
* Represents a class that carries out url rewrite settings.
*/
export class UrlRewriteSetting {
    /**
    * Gets or sets a value indicating whether Heuristic URL Rewrite support is enabled together with custom URL Rewrite  support.
    */
    'enableHeuristicChecksInCustomUrlRewrite'?: boolean;
    /**
    * Gets or sets the root path maximum dynamic signatures for heuristic URL Rewrite detection.
    */
    'maxDynamicSignatures': number;
    /**
    * Gets or sets the sub path maximum dynamic signatures for heuristic URL Rewrite detection.
    */
    'subPathMaxDynamicSignatures': number;
    /**
    * Gets or sets the extensions that will be analyzed for heuristic URL Rewrite detection.
    */
    'urlRewriteAnalyzableExtensions'?: string;
    /**
    * Gets or sets the block separators for heuristic URL Rewrite detection.
    */
    'urlRewriteBlockSeparators': string;
    /**
    * Gets or sets the URL Rewrite mode.
    */
    'urlRewriteMode'?: UrlRewriteSetting.UrlRewriteModeEnum;
    /**
    * Gets or sets the URL Rewrite rules.
    */
    'urlRewriteRules'?: Array<UrlRewriteRuleModel>;
    /**
    * Gets or sets the URL rewrite excluded rules.
    */
    'urlRewriteExcludedLinks'?: Array<UrlRewriteExcludedPathModel>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "enableHeuristicChecksInCustomUrlRewrite",
            "baseName": "EnableHeuristicChecksInCustomUrlRewrite",
            "type": "boolean"
        },
        {
            "name": "maxDynamicSignatures",
            "baseName": "MaxDynamicSignatures",
            "type": "number"
        },
        {
            "name": "subPathMaxDynamicSignatures",
            "baseName": "SubPathMaxDynamicSignatures",
            "type": "number"
        },
        {
            "name": "urlRewriteAnalyzableExtensions",
            "baseName": "UrlRewriteAnalyzableExtensions",
            "type": "string"
        },
        {
            "name": "urlRewriteBlockSeparators",
            "baseName": "UrlRewriteBlockSeparators",
            "type": "string"
        },
        {
            "name": "urlRewriteMode",
            "baseName": "UrlRewriteMode",
            "type": "UrlRewriteSetting.UrlRewriteModeEnum"
        },
        {
            "name": "urlRewriteRules",
            "baseName": "UrlRewriteRules",
            "type": "Array<UrlRewriteRuleModel>"
        },
        {
            "name": "urlRewriteExcludedLinks",
            "baseName": "UrlRewriteExcludedLinks",
            "type": "Array<UrlRewriteExcludedPathModel>"
        }    ];

    static getAttributeTypeMap() {
        return UrlRewriteSetting.attributeTypeMap;
    }
}

export namespace UrlRewriteSetting {
    export enum UrlRewriteModeEnum {
        None = <any> 'None',
        Heuristic = <any> 'Heuristic',
        Custom = <any> 'Custom'
    }
}
