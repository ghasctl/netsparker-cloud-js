/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* Represents optional commit info comes from Netsparker continuous integration plugins.
*/
export class VcsCommitInfo {
    /**
    * Gets or sets a value that represents the continuous integration build configuration name.
    */
    'ciBuildConfigurationName'?: string;
    /**
    * Gets or sets a value that represents whether CI Build triggered by new commit or changeset.
    */
    'ciBuildHasChange'?: boolean;
    /**
    * Gets or sets a value that represents the continuous integration build Id.
    */
    'ciBuildId'?: string;
    /**
    * Gets  a value that represents the continuous integration build server name
    */
    'ciBuildServerName'?: string;
    /**
    * Gets or sets a value that represents the continuous integration build server version.
    */
    'ciBuildServerVersion'?: string;
    /**
    * Gets or sets a value that represents the continuous integration build url as a backlink.
    */
    'ciBuildUrl'?: string;
    /**
    * Gets or sets a value that represents the continuous integration plugin name.
    */
    'ciNcPluginVersion'?: string;
    /**
    * Gets or sets a value that represents the continuous integration build timestamp. This value is obtained from the  version control system by CI Server or generated by CI server.
    */
    'ciTimestamp'?: Date;
    /**
    * Gets or sets a value that represents the committer\'s ID. It is obtained or mapped from the committer\'s version control system name.
    */
    'comitterId'?: string;
    /**
    * Gets or sets a value that represents the committer\'s version control system name. This value can be email adress, user  name or user\'s full name.
    */
    'committer'?: string;
    /**
    * Gets or sets a value that represents the committer\'s Invicti Enterprise name. This value represents display name of  Invicti Enterprise user. It is obtained or mapped from the committer\'s version control system name.
    */
    'committerName'?: string;
    /**
    * Gets or sets a value that represents overridden comitter name according to relevant user mapping. If not found a  mapping then it is empty.
    */
    'committerOverride'?: string;
    /**
    * Gets or sets a value that represents integration system
    */
    'integrationSystem'?: VcsCommitInfo.IntegrationSystemEnum;
    /**
    * Gets or sets a value that represents whether the committer is exist and authorized to see NC Issues
    */
    'isCommiterExistAndAuthorizedInNc'?: boolean;
    /**
    * Gets or sets a value that represents the version control system name such as git.
    */
    'vcsName'?: string;
    /**
    * Gets or sets a value that represents the version control system commit id also known as changeset id.
    */
    'vcsVersion'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ciBuildConfigurationName",
            "baseName": "CiBuildConfigurationName",
            "type": "string"
        },
        {
            "name": "ciBuildHasChange",
            "baseName": "CiBuildHasChange",
            "type": "boolean"
        },
        {
            "name": "ciBuildId",
            "baseName": "CiBuildId",
            "type": "string"
        },
        {
            "name": "ciBuildServerName",
            "baseName": "CiBuildServerName",
            "type": "string"
        },
        {
            "name": "ciBuildServerVersion",
            "baseName": "CiBuildServerVersion",
            "type": "string"
        },
        {
            "name": "ciBuildUrl",
            "baseName": "CiBuildUrl",
            "type": "string"
        },
        {
            "name": "ciNcPluginVersion",
            "baseName": "CiNcPluginVersion",
            "type": "string"
        },
        {
            "name": "ciTimestamp",
            "baseName": "CiTimestamp",
            "type": "Date"
        },
        {
            "name": "comitterId",
            "baseName": "ComitterId",
            "type": "string"
        },
        {
            "name": "committer",
            "baseName": "Committer",
            "type": "string"
        },
        {
            "name": "committerName",
            "baseName": "CommitterName",
            "type": "string"
        },
        {
            "name": "committerOverride",
            "baseName": "CommitterOverride",
            "type": "string"
        },
        {
            "name": "integrationSystem",
            "baseName": "IntegrationSystem",
            "type": "VcsCommitInfo.IntegrationSystemEnum"
        },
        {
            "name": "isCommiterExistAndAuthorizedInNc",
            "baseName": "IsCommiterExistAndAuthorizedInNc",
            "type": "boolean"
        },
        {
            "name": "vcsName",
            "baseName": "VcsName",
            "type": "string"
        },
        {
            "name": "vcsVersion",
            "baseName": "VcsVersion",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return VcsCommitInfo.attributeTypeMap;
    }
}

export namespace VcsCommitInfo {
    export enum IntegrationSystemEnum {
        Teamcity = <any> 'Teamcity',
        Jenkins = <any> 'Jenkins',
        Bamboo = <any> 'Bamboo',
        GitLab = <any> 'GitLab',
        AzureDevOps = <any> 'AzureDevOps',
        Jira = <any> 'Jira',
        CircleCi = <any> 'CircleCI',
        TravisCi = <any> 'TravisCI',
        UrbanCodeDeploy = <any> 'UrbanCodeDeploy',
        GitHubActions = <any> 'GitHubActions'
    }
}
