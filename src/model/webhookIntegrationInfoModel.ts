/**
 * Netsparker Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CustomHttpHeaderModel } from './customHttpHeaderModel';
import { IntegrationWizardResultModel } from './integrationWizardResultModel';
import { NotificationIntegrationCustomFieldModel } from './notificationIntegrationCustomFieldModel';

/**
* The Webhook integration info
*/
export class WebhookIntegrationInfoModel {
    /**
    * The HTTP method that indicates the action to be performed on a resource for the request.
    */
    'httpMethodType'?: WebhookIntegrationInfoModel.HttpMethodTypeEnum;
    /**
    * This is the data format in which requests are sent.
    */
    'parameterType'?: WebhookIntegrationInfoModel.ParameterTypeEnum;
    /**
    * The URL to which issues should be sent.
    */
    'url': string;
    /**
    * The parameter name of the issue.
    */
    'issue'?: string;
    /**
    * Gets or sets the Http Header.
    */
    'customHttpHeaderModels'?: Array<CustomHttpHeaderModel>;
    /**
    * The parameter name of the issue title.
    */
    'title'?: string;
    /**
    * The parameter name of the issue body.
    */
    'body'?: string;
    /**
    * The Username for the HTTP authentication.
    */
    'username'?: string;
    /**
    * The Password for the HTTP authentication.
    */
    'password'?: string;
    'type'?: WebhookIntegrationInfoModel.TypeEnum;
    /**
    * Gets or sets the account ID.
    */
    'accountID'?: string;
    /**
    * Gets or sets the Custom Fields.
    */
    'customFields'?: Array<NotificationIntegrationCustomFieldModel>;
    /**
    * Gets the generic error message.
    */
    'genericErrorMessage'?: string;
    /**
    * Gets or sets the request identifier.
    */
    'identifier'?: string;
    /**
    * Gets or sets the {Invicti.Cloud.Core.Models.ScanNotificationIntegration} name.
    */
    'name'?: string;
    /**
    * Gets or sets the type of the issue.
    */
    'reopenStatus'?: string;
    'integrationWizardResultModel'?: IntegrationWizardResultModel;
    /**
    * Gets or sets the type of the issue.
    */
    'resolvedStatus'?: string;
    /**
    * Gets the test message body.
    */
    'testMessageBody'?: string;
    /**
    * Gets the test message title.
    */
    'testMessageTitle'?: string;
    /**
    * Gets or sets the title format.
    */
    'titleFormat': string;
    /**
    * Gets the webhook URL.
    */
    'webhookUrl'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "httpMethodType",
            "baseName": "HttpMethodType",
            "type": "WebhookIntegrationInfoModel.HttpMethodTypeEnum"
        },
        {
            "name": "parameterType",
            "baseName": "ParameterType",
            "type": "WebhookIntegrationInfoModel.ParameterTypeEnum"
        },
        {
            "name": "url",
            "baseName": "Url",
            "type": "string"
        },
        {
            "name": "issue",
            "baseName": "Issue",
            "type": "string"
        },
        {
            "name": "customHttpHeaderModels",
            "baseName": "CustomHttpHeaderModels",
            "type": "Array<CustomHttpHeaderModel>"
        },
        {
            "name": "title",
            "baseName": "Title",
            "type": "string"
        },
        {
            "name": "body",
            "baseName": "Body",
            "type": "string"
        },
        {
            "name": "username",
            "baseName": "Username",
            "type": "string"
        },
        {
            "name": "password",
            "baseName": "Password",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "Type",
            "type": "WebhookIntegrationInfoModel.TypeEnum"
        },
        {
            "name": "accountID",
            "baseName": "AccountID",
            "type": "string"
        },
        {
            "name": "customFields",
            "baseName": "CustomFields",
            "type": "Array<NotificationIntegrationCustomFieldModel>"
        },
        {
            "name": "genericErrorMessage",
            "baseName": "GenericErrorMessage",
            "type": "string"
        },
        {
            "name": "identifier",
            "baseName": "Identifier",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "reopenStatus",
            "baseName": "ReopenStatus",
            "type": "string"
        },
        {
            "name": "integrationWizardResultModel",
            "baseName": "IntegrationWizardResultModel",
            "type": "IntegrationWizardResultModel"
        },
        {
            "name": "resolvedStatus",
            "baseName": "ResolvedStatus",
            "type": "string"
        },
        {
            "name": "testMessageBody",
            "baseName": "TestMessageBody",
            "type": "string"
        },
        {
            "name": "testMessageTitle",
            "baseName": "TestMessageTitle",
            "type": "string"
        },
        {
            "name": "titleFormat",
            "baseName": "TitleFormat",
            "type": "string"
        },
        {
            "name": "webhookUrl",
            "baseName": "WebhookUrl",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return WebhookIntegrationInfoModel.attributeTypeMap;
    }
}

export namespace WebhookIntegrationInfoModel {
    export enum HttpMethodTypeEnum {
        Get = <any> 'Get',
        Post = <any> 'Post',
        Put = <any> 'Put'
    }
    export enum ParameterTypeEnum {
        Form = <any> 'Form',
        Json = <any> 'Json',
        Xml = <any> 'Xml',
        QueryString = <any> 'QueryString'
    }
    export enum TypeEnum {
        Jira = <any> 'Jira',
        GitHub = <any> 'GitHub',
        Tfs = <any> 'TFS',
        FogBugz = <any> 'FogBugz',
        ServiceNow = <any> 'ServiceNow',
        Slack = <any> 'Slack',
        GitLab = <any> 'GitLab',
        Bitbucket = <any> 'Bitbucket',
        Unfuddle = <any> 'Unfuddle',
        Zapier = <any> 'Zapier',
        AzureDevOps = <any> 'AzureDevOps',
        Redmine = <any> 'Redmine',
        Bugzilla = <any> 'Bugzilla',
        Kafka = <any> 'Kafka',
        PagerDuty = <any> 'PagerDuty',
        MicrosoftTeams = <any> 'MicrosoftTeams',
        Clubhouse = <any> 'Clubhouse',
        Trello = <any> 'Trello',
        Asana = <any> 'Asana',
        Webhook = <any> 'Webhook',
        Kenna = <any> 'Kenna',
        Freshservice = <any> 'Freshservice',
        YouTrack = <any> 'YouTrack',
        NetsparkerEnterprise = <any> 'NetsparkerEnterprise',
        Splunk = <any> 'Splunk',
        Mattermost = <any> 'Mattermost',
        Hashicorp = <any> 'Hashicorp',
        PivotalTracker = <any> 'PivotalTracker',
        CyberArk = <any> 'CyberArk'
    }
}
