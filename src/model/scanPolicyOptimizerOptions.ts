/**
 * Netsparker Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class ScanPolicyOptimizerOptions {
    'appServer'?: ScanPolicyOptimizerOptions.AppServerEnum;
    'databaseServer'?: ScanPolicyOptimizerOptions.DatabaseServerEnum;
    'directoryNameLimit'?: number;
    'domParserPreset'?: ScanPolicyOptimizerOptions.DomParserPresetEnum;
    'hosts'?: Array<string>;
    'name'?: string;
    'netsparkerHawkBaseUrl'?: string;
    'operatingSystem'?: ScanPolicyOptimizerOptions.OperatingSystemEnum;
    'optimized'?: boolean;
    'resourceFinders'?: Array<string>;
    'suggestionStatus'?: ScanPolicyOptimizerOptions.SuggestionStatusEnum;
    'webServer'?: ScanPolicyOptimizerOptions.WebServerEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "appServer",
            "baseName": "AppServer",
            "type": "ScanPolicyOptimizerOptions.AppServerEnum"
        },
        {
            "name": "databaseServer",
            "baseName": "DatabaseServer",
            "type": "ScanPolicyOptimizerOptions.DatabaseServerEnum"
        },
        {
            "name": "directoryNameLimit",
            "baseName": "DirectoryNameLimit",
            "type": "number"
        },
        {
            "name": "domParserPreset",
            "baseName": "DomParserPreset",
            "type": "ScanPolicyOptimizerOptions.DomParserPresetEnum"
        },
        {
            "name": "hosts",
            "baseName": "Hosts",
            "type": "Array<string>"
        },
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "netsparkerHawkBaseUrl",
            "baseName": "NetsparkerHawkBaseUrl",
            "type": "string"
        },
        {
            "name": "operatingSystem",
            "baseName": "OperatingSystem",
            "type": "ScanPolicyOptimizerOptions.OperatingSystemEnum"
        },
        {
            "name": "optimized",
            "baseName": "Optimized",
            "type": "boolean"
        },
        {
            "name": "resourceFinders",
            "baseName": "ResourceFinders",
            "type": "Array<string>"
        },
        {
            "name": "suggestionStatus",
            "baseName": "SuggestionStatus",
            "type": "ScanPolicyOptimizerOptions.SuggestionStatusEnum"
        },
        {
            "name": "webServer",
            "baseName": "WebServer",
            "type": "ScanPolicyOptimizerOptions.WebServerEnum"
        }    ];

    static getAttributeTypeMap() {
        return ScanPolicyOptimizerOptions.attributeTypeMap;
    }
}

export namespace ScanPolicyOptimizerOptions {
    export enum AppServerEnum {
        All = <any> 'All',
        Aspnet = <any> 'Aspnet',
        Php = <any> 'Php',
        Rails = <any> 'Rails',
        Java = <any> 'Java',
        Perl = <any> 'Perl',
        Python = <any> 'Python',
        NodeJs = <any> 'NodeJs',
        Other = <any> 'Other'
    }
    export enum DatabaseServerEnum {
        All = <any> 'All',
        MsSql = <any> 'MsSql',
        MySql = <any> 'MySql',
        Oracle = <any> 'Oracle',
        PostgreSql = <any> 'PostgreSql',
        MsAccess = <any> 'MsAccess',
        Other = <any> 'Other'
    }
    export enum DomParserPresetEnum {
        None = <any> 'None',
        Default = <any> 'Default',
        Spa = <any> 'Spa',
        LargeSpa = <any> 'LargeSpa'
    }
    export enum OperatingSystemEnum {
        All = <any> 'All',
        Windows = <any> 'Windows',
        Unix = <any> 'Unix'
    }
    export enum SuggestionStatusEnum {
        Always = <any> 'Always',
        NotNow = <any> 'NotNow',
        Never = <any> 'Never'
    }
    export enum WebServerEnum {
        All = <any> 'All',
        Iis = <any> 'Iis',
        Apache = <any> 'Apache',
        ApacheTomcat = <any> 'ApacheTomcat',
        Nginx = <any> 'Nginx',
        Other = <any> 'Other'
    }
}
