"use strict";
/**
 * Netsparker Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
class ScanPolicyOptimizerOptions {
    static getAttributeTypeMap() {
        return ScanPolicyOptimizerOptions.attributeTypeMap;
    }
}
ScanPolicyOptimizerOptions.discriminator = undefined;
ScanPolicyOptimizerOptions.attributeTypeMap = [
    {
        "name": "appServer",
        "baseName": "AppServer",
        "type": "ScanPolicyOptimizerOptions.AppServerEnum"
    },
    {
        "name": "databaseServer",
        "baseName": "DatabaseServer",
        "type": "ScanPolicyOptimizerOptions.DatabaseServerEnum"
    },
    {
        "name": "directoryNameLimit",
        "baseName": "DirectoryNameLimit",
        "type": "number"
    },
    {
        "name": "domParserPreset",
        "baseName": "DomParserPreset",
        "type": "ScanPolicyOptimizerOptions.DomParserPresetEnum"
    },
    {
        "name": "hosts",
        "baseName": "Hosts",
        "type": "Array<string>"
    },
    {
        "name": "name",
        "baseName": "Name",
        "type": "string"
    },
    {
        "name": "netsparkerHawkBaseUrl",
        "baseName": "NetsparkerHawkBaseUrl",
        "type": "string"
    },
    {
        "name": "operatingSystem",
        "baseName": "OperatingSystem",
        "type": "ScanPolicyOptimizerOptions.OperatingSystemEnum"
    },
    {
        "name": "optimized",
        "baseName": "Optimized",
        "type": "boolean"
    },
    {
        "name": "resourceFinders",
        "baseName": "ResourceFinders",
        "type": "Array<string>"
    },
    {
        "name": "suggestionStatus",
        "baseName": "SuggestionStatus",
        "type": "ScanPolicyOptimizerOptions.SuggestionStatusEnum"
    },
    {
        "name": "webServer",
        "baseName": "WebServer",
        "type": "ScanPolicyOptimizerOptions.WebServerEnum"
    }
];
exports.ScanPolicyOptimizerOptions = ScanPolicyOptimizerOptions;
(function (ScanPolicyOptimizerOptions) {
    let AppServerEnum;
    (function (AppServerEnum) {
        AppServerEnum[AppServerEnum["All"] = 'All'] = "All";
        AppServerEnum[AppServerEnum["Aspnet"] = 'Aspnet'] = "Aspnet";
        AppServerEnum[AppServerEnum["Php"] = 'Php'] = "Php";
        AppServerEnum[AppServerEnum["Rails"] = 'Rails'] = "Rails";
        AppServerEnum[AppServerEnum["Java"] = 'Java'] = "Java";
        AppServerEnum[AppServerEnum["Perl"] = 'Perl'] = "Perl";
        AppServerEnum[AppServerEnum["Python"] = 'Python'] = "Python";
        AppServerEnum[AppServerEnum["NodeJs"] = 'NodeJs'] = "NodeJs";
        AppServerEnum[AppServerEnum["Other"] = 'Other'] = "Other";
    })(AppServerEnum = ScanPolicyOptimizerOptions.AppServerEnum || (ScanPolicyOptimizerOptions.AppServerEnum = {}));
    let DatabaseServerEnum;
    (function (DatabaseServerEnum) {
        DatabaseServerEnum[DatabaseServerEnum["All"] = 'All'] = "All";
        DatabaseServerEnum[DatabaseServerEnum["MsSql"] = 'MsSql'] = "MsSql";
        DatabaseServerEnum[DatabaseServerEnum["MySql"] = 'MySql'] = "MySql";
        DatabaseServerEnum[DatabaseServerEnum["Oracle"] = 'Oracle'] = "Oracle";
        DatabaseServerEnum[DatabaseServerEnum["PostgreSql"] = 'PostgreSql'] = "PostgreSql";
        DatabaseServerEnum[DatabaseServerEnum["MsAccess"] = 'MsAccess'] = "MsAccess";
        DatabaseServerEnum[DatabaseServerEnum["Other"] = 'Other'] = "Other";
    })(DatabaseServerEnum = ScanPolicyOptimizerOptions.DatabaseServerEnum || (ScanPolicyOptimizerOptions.DatabaseServerEnum = {}));
    let DomParserPresetEnum;
    (function (DomParserPresetEnum) {
        DomParserPresetEnum[DomParserPresetEnum["None"] = 'None'] = "None";
        DomParserPresetEnum[DomParserPresetEnum["Default"] = 'Default'] = "Default";
        DomParserPresetEnum[DomParserPresetEnum["Spa"] = 'Spa'] = "Spa";
        DomParserPresetEnum[DomParserPresetEnum["LargeSpa"] = 'LargeSpa'] = "LargeSpa";
    })(DomParserPresetEnum = ScanPolicyOptimizerOptions.DomParserPresetEnum || (ScanPolicyOptimizerOptions.DomParserPresetEnum = {}));
    let OperatingSystemEnum;
    (function (OperatingSystemEnum) {
        OperatingSystemEnum[OperatingSystemEnum["All"] = 'All'] = "All";
        OperatingSystemEnum[OperatingSystemEnum["Windows"] = 'Windows'] = "Windows";
        OperatingSystemEnum[OperatingSystemEnum["Unix"] = 'Unix'] = "Unix";
    })(OperatingSystemEnum = ScanPolicyOptimizerOptions.OperatingSystemEnum || (ScanPolicyOptimizerOptions.OperatingSystemEnum = {}));
    let SuggestionStatusEnum;
    (function (SuggestionStatusEnum) {
        SuggestionStatusEnum[SuggestionStatusEnum["Always"] = 'Always'] = "Always";
        SuggestionStatusEnum[SuggestionStatusEnum["NotNow"] = 'NotNow'] = "NotNow";
        SuggestionStatusEnum[SuggestionStatusEnum["Never"] = 'Never'] = "Never";
    })(SuggestionStatusEnum = ScanPolicyOptimizerOptions.SuggestionStatusEnum || (ScanPolicyOptimizerOptions.SuggestionStatusEnum = {}));
    let WebServerEnum;
    (function (WebServerEnum) {
        WebServerEnum[WebServerEnum["All"] = 'All'] = "All";
        WebServerEnum[WebServerEnum["Iis"] = 'Iis'] = "Iis";
        WebServerEnum[WebServerEnum["Apache"] = 'Apache'] = "Apache";
        WebServerEnum[WebServerEnum["ApacheTomcat"] = 'ApacheTomcat'] = "ApacheTomcat";
        WebServerEnum[WebServerEnum["Nginx"] = 'Nginx'] = "Nginx";
        WebServerEnum[WebServerEnum["Other"] = 'Other'] = "Other";
    })(WebServerEnum = ScanPolicyOptimizerOptions.WebServerEnum || (ScanPolicyOptimizerOptions.WebServerEnum = {}));
})(ScanPolicyOptimizerOptions = exports.ScanPolicyOptimizerOptions || (exports.ScanPolicyOptimizerOptions = {}));
//# sourceMappingURL=scanPolicyOptimizerOptions.js.map