/**
 * Invicti Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class NotificationEmailSmsFilterApi {
    /**
    * Gets or sets a value indicating whether this Scan Notification is confirmed.
    */
    'isConfirmed'?: boolean;
    /**
    * Gets or sets the lowest severity. This property determines when this rule will be executed and is only used for Scan  Completion Notification
    */
    'severity'?: NotificationEmailSmsFilterApi.SeverityEnum;
    /**
    * Gets or sets the state of filter. This property determines when this rule will be executed and is only used for Scan  Completion Notification
    */
    'state'?: NotificationEmailSmsFilterApi.StateEnum;
    /**
    * Gets or sets a value indicating whether this Scan Notification is certainty.
    */
    'certainty'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "isConfirmed",
            "baseName": "IsConfirmed",
            "type": "boolean"
        },
        {
            "name": "severity",
            "baseName": "Severity",
            "type": "NotificationEmailSmsFilterApi.SeverityEnum"
        },
        {
            "name": "state",
            "baseName": "State",
            "type": "NotificationEmailSmsFilterApi.StateEnum"
        },
        {
            "name": "certainty",
            "baseName": "Certainty",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return NotificationEmailSmsFilterApi.attributeTypeMap;
    }
}

export namespace NotificationEmailSmsFilterApi {
    export enum SeverityEnum {
        BestPractice = <any> 'BestPractice',
        Information = <any> 'Information',
        Low = <any> 'Low',
        Medium = <any> 'Medium',
        High = <any> 'High',
        Critical = <any> 'Critical'
    }
    export enum StateEnum {
        NotFound = <any> 'NotFound',
        Fixed = <any> 'Fixed',
        NotFixed = <any> 'NotFixed',
        New = <any> 'New',
        Revived = <any> 'Revived'
    }
}
