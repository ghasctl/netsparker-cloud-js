/**
 * Netsparker Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { FreshserviceEntity } from './freshserviceEntity';
import { FreshserviceUser } from './freshserviceUser';
import { IntegrationWizardResultModel } from './integrationWizardResultModel';
import { NotificationIntegrationCustomFieldModel } from './notificationIntegrationCustomFieldModel';

/**
* The Freshservice integration info
*/
export class FreshserviceIntegrationInfoModel {
    /**
    * The server URL to which to send problems.
    */
    'serverUrl': string;
    /**
    * The API key for authentication.
    */
    'apiKey': string;
    /**
    * The user identifier who reports the problem.
    */
    'requesterId': number;
    /**
    * The group identifier to which the problem is assigned.
    */
    'groupId'?: number;
    /**
    * The agent identifier to whom the problem is assigned.
    */
    'agentId'?: number;
    /**
    * The priority identifier of the problem.
    */
    'priorityId'?: number;
    'integrationWizardResultModel'?: IntegrationWizardResultModel;
    /**
    * The Requesters List.
    */
    'requesters'?: Array<FreshserviceUser>;
    /**
    * The Groups List.
    */
    'groups'?: Array<FreshserviceEntity>;
    /**
    * The Agents List.
    */
    'agents'?: Array<FreshserviceUser>;
    /**
    * The Priorities List.
    */
    'priorities'?: Array<FreshserviceEntity>;
    /**
    * The number of days from the date the problem was created to the date it\'s due.
    */
    'dueDays': number;
    'type'?: FreshserviceIntegrationInfoModel.TypeEnum;
    /**
    * Gets or sets the account ID.
    */
    'accountID'?: string;
    /**
    * Gets or sets the Custom Fields.
    */
    'customFields'?: Array<NotificationIntegrationCustomFieldModel>;
    /**
    * Gets the generic error message.
    */
    'genericErrorMessage'?: string;
    /**
    * Gets or sets the request identifier.
    */
    'identifier'?: string;
    /**
    * Gets or sets the {Invicti.Cloud.Core.Models.ScanNotificationIntegration} name.
    */
    'name'?: string;
    /**
    * Gets or sets the type of the issue.
    */
    'reopenStatus'?: string;
    /**
    * Gets or sets the type of the issue.
    */
    'resolvedStatus'?: string;
    /**
    * Gets the test message body.
    */
    'testMessageBody'?: string;
    /**
    * Gets the test message title.
    */
    'testMessageTitle'?: string;
    /**
    * Gets or sets the title format.
    */
    'titleFormat': string;
    /**
    * Gets the webhook URL.
    */
    'webhookUrl'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "serverUrl",
            "baseName": "ServerUrl",
            "type": "string"
        },
        {
            "name": "apiKey",
            "baseName": "ApiKey",
            "type": "string"
        },
        {
            "name": "requesterId",
            "baseName": "RequesterId",
            "type": "number"
        },
        {
            "name": "groupId",
            "baseName": "GroupId",
            "type": "number"
        },
        {
            "name": "agentId",
            "baseName": "AgentId",
            "type": "number"
        },
        {
            "name": "priorityId",
            "baseName": "PriorityId",
            "type": "number"
        },
        {
            "name": "integrationWizardResultModel",
            "baseName": "IntegrationWizardResultModel",
            "type": "IntegrationWizardResultModel"
        },
        {
            "name": "requesters",
            "baseName": "Requesters",
            "type": "Array<FreshserviceUser>"
        },
        {
            "name": "groups",
            "baseName": "Groups",
            "type": "Array<FreshserviceEntity>"
        },
        {
            "name": "agents",
            "baseName": "Agents",
            "type": "Array<FreshserviceUser>"
        },
        {
            "name": "priorities",
            "baseName": "Priorities",
            "type": "Array<FreshserviceEntity>"
        },
        {
            "name": "dueDays",
            "baseName": "DueDays",
            "type": "number"
        },
        {
            "name": "type",
            "baseName": "Type",
            "type": "FreshserviceIntegrationInfoModel.TypeEnum"
        },
        {
            "name": "accountID",
            "baseName": "AccountID",
            "type": "string"
        },
        {
            "name": "customFields",
            "baseName": "CustomFields",
            "type": "Array<NotificationIntegrationCustomFieldModel>"
        },
        {
            "name": "genericErrorMessage",
            "baseName": "GenericErrorMessage",
            "type": "string"
        },
        {
            "name": "identifier",
            "baseName": "Identifier",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "Name",
            "type": "string"
        },
        {
            "name": "reopenStatus",
            "baseName": "ReopenStatus",
            "type": "string"
        },
        {
            "name": "resolvedStatus",
            "baseName": "ResolvedStatus",
            "type": "string"
        },
        {
            "name": "testMessageBody",
            "baseName": "TestMessageBody",
            "type": "string"
        },
        {
            "name": "testMessageTitle",
            "baseName": "TestMessageTitle",
            "type": "string"
        },
        {
            "name": "titleFormat",
            "baseName": "TitleFormat",
            "type": "string"
        },
        {
            "name": "webhookUrl",
            "baseName": "WebhookUrl",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return FreshserviceIntegrationInfoModel.attributeTypeMap;
    }
}

export namespace FreshserviceIntegrationInfoModel {
    export enum TypeEnum {
        Jira = <any> 'Jira',
        GitHub = <any> 'GitHub',
        Tfs = <any> 'TFS',
        FogBugz = <any> 'FogBugz',
        ServiceNow = <any> 'ServiceNow',
        Slack = <any> 'Slack',
        GitLab = <any> 'GitLab',
        Bitbucket = <any> 'Bitbucket',
        Unfuddle = <any> 'Unfuddle',
        Zapier = <any> 'Zapier',
        AzureDevOps = <any> 'AzureDevOps',
        Redmine = <any> 'Redmine',
        Bugzilla = <any> 'Bugzilla',
        Kafka = <any> 'Kafka',
        PagerDuty = <any> 'PagerDuty',
        MicrosoftTeams = <any> 'MicrosoftTeams',
        Clubhouse = <any> 'Clubhouse',
        Trello = <any> 'Trello',
        Asana = <any> 'Asana',
        Webhook = <any> 'Webhook',
        Kenna = <any> 'Kenna',
        Freshservice = <any> 'Freshservice',
        YouTrack = <any> 'YouTrack',
        NetsparkerEnterprise = <any> 'NetsparkerEnterprise',
        Splunk = <any> 'Splunk',
        Mattermost = <any> 'Mattermost',
        Hashicorp = <any> 'Hashicorp',
        PivotalTracker = <any> 'PivotalTracker',
        CyberArk = <any> 'CyberArk'
    }
}
