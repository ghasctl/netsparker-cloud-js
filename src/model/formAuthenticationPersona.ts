/**
 * Netsparker Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* Represents a Form Authentication persona.
*/
export class FormAuthenticationPersona {
    /**
    * Gets or sets a value indicating whether this persona is the active one to use for a scan.
    */
    'isActive'?: boolean;
    /**
    * Gets or sets the password.
    */
    'password'?: string;
    /**
    * Gets or sets the user name.
    */
    'userName': string;
    /**
    * Gets or sets OtpType.
    */
    'otpType'?: FormAuthenticationPersona.OtpTypeEnum;
    /**
    * Gets or sets secret key.
    */
    'secretKey'?: string;
    /**
    * Gets or sets digit.
    */
    'digit'?: FormAuthenticationPersona.DigitEnum;
    /**
    * Gets or sets period (seconds).
    */
    'period'?: number;
    /**
    * Gets or sets hash algorithm.
    */
    'algorithm'?: FormAuthenticationPersona.AlgorithmEnum;
    /**
    * Gets or sets the type of form authentication.
    */
    'formAuthType'?: FormAuthenticationPersona.FormAuthTypeEnum;
    /**
    * Gets or sets the integration id.
    */
    'integrationId'?: string;
    /**
    * Gets or sets the KV Secret engine version.
    */
    'version'?: FormAuthenticationPersona.VersionEnum;
    /**
    * Gets or sets the secret engine.
    */
    'secretEngine'?: string;
    /**
    * Gets or sets the secret.
    */
    'secret'?: string;
    /**
    * Gets or sets the username is static or not.
    */
    'useStaticUsername'?: boolean;
    /**
    * Gets or sets the static username.
    */
    'staticUsername'?: string;
    /**
    * Gets or sets the username key.
    */
    'usernameKey'?: string;
    /**
    * Gets or sets the password key.
    */
    'passwordKey'?: string;
    /**
    * Gets or sets the username is static or not.
    */
    'cyberArkUseStaticUsername'?: boolean;
    /**
    * Gets or sets the AppID.
    */
    'cyberArkStaticUsername'?: string;
    /**
    * Gets or sets the Query.
    */
    'cyberArkUserNameQuery'?: string;
    /**
    * Gets or sets the Query.
    */
    'cyberArkPasswordQuery'?: string;
    /**
    * Gets or sets the user name that not modified by user on client side.
    */
    'originalUserName'?: string;
    /**
    * Gets or sets a value indicating whether the placeholders is replaced with actual credentials.
    */
    'isReplacedCredentials'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "isActive",
            "baseName": "IsActive",
            "type": "boolean"
        },
        {
            "name": "password",
            "baseName": "Password",
            "type": "string"
        },
        {
            "name": "userName",
            "baseName": "UserName",
            "type": "string"
        },
        {
            "name": "otpType",
            "baseName": "OtpType",
            "type": "FormAuthenticationPersona.OtpTypeEnum"
        },
        {
            "name": "secretKey",
            "baseName": "SecretKey",
            "type": "string"
        },
        {
            "name": "digit",
            "baseName": "Digit",
            "type": "FormAuthenticationPersona.DigitEnum"
        },
        {
            "name": "period",
            "baseName": "Period",
            "type": "number"
        },
        {
            "name": "algorithm",
            "baseName": "Algorithm",
            "type": "FormAuthenticationPersona.AlgorithmEnum"
        },
        {
            "name": "formAuthType",
            "baseName": "FormAuthType",
            "type": "FormAuthenticationPersona.FormAuthTypeEnum"
        },
        {
            "name": "integrationId",
            "baseName": "IntegrationId",
            "type": "string"
        },
        {
            "name": "version",
            "baseName": "Version",
            "type": "FormAuthenticationPersona.VersionEnum"
        },
        {
            "name": "secretEngine",
            "baseName": "SecretEngine",
            "type": "string"
        },
        {
            "name": "secret",
            "baseName": "Secret",
            "type": "string"
        },
        {
            "name": "useStaticUsername",
            "baseName": "UseStaticUsername",
            "type": "boolean"
        },
        {
            "name": "staticUsername",
            "baseName": "StaticUsername",
            "type": "string"
        },
        {
            "name": "usernameKey",
            "baseName": "UsernameKey",
            "type": "string"
        },
        {
            "name": "passwordKey",
            "baseName": "PasswordKey",
            "type": "string"
        },
        {
            "name": "cyberArkUseStaticUsername",
            "baseName": "CyberArkUseStaticUsername",
            "type": "boolean"
        },
        {
            "name": "cyberArkStaticUsername",
            "baseName": "CyberArkStaticUsername",
            "type": "string"
        },
        {
            "name": "cyberArkUserNameQuery",
            "baseName": "CyberArkUserNameQuery",
            "type": "string"
        },
        {
            "name": "cyberArkPasswordQuery",
            "baseName": "CyberArkPasswordQuery",
            "type": "string"
        },
        {
            "name": "originalUserName",
            "baseName": "OriginalUserName",
            "type": "string"
        },
        {
            "name": "isReplacedCredentials",
            "baseName": "IsReplacedCredentials",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return FormAuthenticationPersona.attributeTypeMap;
    }
}

export namespace FormAuthenticationPersona {
    export enum OtpTypeEnum {
        Totp = <any> 'Totp',
        Hotp = <any> 'Hotp'
    }
    export enum DigitEnum {
        OtpDigit6 = <any> 'OtpDigit6',
        OtpDigit7 = <any> 'OtpDigit7',
        OtpDigit8 = <any> 'OtpDigit8'
    }
    export enum AlgorithmEnum {
        Sha1 = <any> 'Sha1',
        Sha256 = <any> 'Sha256',
        Sha512 = <any> 'Sha512'
    }
    export enum FormAuthTypeEnum {
        Manual = <any> 'Manual',
        Integration = <any> 'Integration'
    }
    export enum VersionEnum {
        V1 = <any> 'V1',
        V2 = <any> 'V2'
    }
}
