/**
 * Netsparker Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http from 'http';
import { NewRoleApiModel } from '../model/newRoleApiModel';
import { PermissionApiModel } from '../model/permissionApiModel';
import { RoleApiModelListApiResult } from '../model/roleApiModelListApiResult';
import { RoleApiViewModel } from '../model/roleApiViewModel';
import { UpdateRoleApiModel } from '../model/updateRoleApiModel';
import { Authentication, Interceptor } from '../model/models';
export declare enum RolesApiApiKeys {
}
export declare class RolesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: RolesApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     *
     * @summary Deletes a role.
     * @param id Role id
     */
    rolesDelete(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     *
     * @summary Gets the role by the specified id.
     * @param id Role id
     */
    rolesGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: RoleApiViewModel;
    }>;
    /**
     *
     * @summary Gets the list of roles.
     * @param page The page index.
     * @param pageSize The page size. Page size can be any value between 1 and 200.
     */
    rolesList(page?: number, pageSize?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: RoleApiModelListApiResult;
    }>;
    /**
     *
     * @summary Gets the list of roles.
     */
    rolesListPermissions(options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<PermissionApiModel>;
    }>;
    /**
     *
     * @summary Creates a new role
     * @param model Model of the role
     */
    rolesNew(model: NewRoleApiModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: RoleApiViewModel;
    }>;
    /**
     *
     * @summary Updates a role
     * @param model Model of the role
     */
    rolesUpdate(model: UpdateRoleApiModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: RoleApiViewModel;
    }>;
}
