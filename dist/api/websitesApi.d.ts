/**
 * Netsparker Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http from 'http';
import { DeleteWebsiteApiModel } from '../model/deleteWebsiteApiModel';
import { NewWebsiteApiModel } from '../model/newWebsiteApiModel';
import { SendVerificationEmailModel } from '../model/sendVerificationEmailModel';
import { StartVerificationApiModel } from '../model/startVerificationApiModel';
import { StartVerificationResult } from '../model/startVerificationResult';
import { UpdateWebsiteApiModel } from '../model/updateWebsiteApiModel';
import { VerifyApiModel } from '../model/verifyApiModel';
import { WebsiteApiModel } from '../model/websiteApiModel';
import { WebsiteListApiResult } from '../model/websiteListApiResult';
import { Authentication, Interceptor } from '../model/models';
export declare enum WebsitesApiApiKeys {
}
export declare class WebsitesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: WebsitesApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     *
     * @summary Deletes a website.
     * @param model The model.
     */
    websitesDelete(model: DeleteWebsiteApiModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     *
     * @summary Gets website by name or URL.
     * @param query The website name or URL.
     */
    websitesGet(query: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: WebsiteApiModel;
    }>;
    /**
     *
     * @summary Gets the list of websites by group name or id.
     * @param query The website group name or id.
     * @param page The page index.
     * @param pageSize The page size. Page size can be any value between 1 and 200.
     */
    websitesGetWebsitesByGroup(query: string, page?: number, pageSize?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: WebsiteListApiResult;
    }>;
    /**
     *
     * @summary Gets website by id.
     * @param id The website id.
     */
    websitesGet_1(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: WebsiteApiModel;
    }>;
    /**
     *
     * @summary Gets the list of websites.
     * @param page The page index.
     * @param pageSize The page size. Page size can be any value between 1 and 200.
     */
    websitesList(page?: number, pageSize?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: WebsiteListApiResult;
    }>;
    /**
     *
     * @summary Creates a new website.
     * @param model The model.
     */
    websitesNew(model: NewWebsiteApiModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: WebsiteApiModel;
    }>;
    /**
     *
     * @summary Sends the verification email if verification limit not exceeded yet.
     * @param websiteUrl The website URL.
     */
    websitesSendVerificationEmail(websiteUrl: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: SendVerificationEmailModel;
    }>;
    /**
     *
     * @summary Starts the verification with specified method.
     * @param model The model.
     */
    websitesStartVerification(model: StartVerificationApiModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: StartVerificationResult;
    }>;
    /**
     *
     * @summary Updates a website.
     * @param model The model.
     */
    websitesUpdate(model: UpdateWebsiteApiModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: WebsiteApiModel;
    }>;
    /**
     *
     * @summary Renders verification file.
     * @param websiteUrl The website URL.
     */
    websitesVerificationFile(websiteUrl: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     *
     * @summary Executes verification process.
     * @param model The model.
     */
    websitesVerify(model: VerifyApiModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
