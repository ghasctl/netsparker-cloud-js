/**
 * Netsparker Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http from 'http';
import { AgentGroupApiDeleteModel } from '../model/agentGroupApiDeleteModel';
import { AgentGroupApiNewModel } from '../model/agentGroupApiNewModel';
import { AgentGroupApiUpdateModel } from '../model/agentGroupApiUpdateModel';
import { AgentGroupModel } from '../model/agentGroupModel';
import { AgentGroupsListApiResult } from '../model/agentGroupsListApiResult';
import { Authentication, Interceptor } from '../model/models';
export declare enum AgentGroupsApiApiKeys {
}
export declare class AgentGroupsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: AgentGroupsApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     *
     * @summary Deletes the agent group
     * @param model the model.
     */
    agentGroupsDelete(model: AgentGroupApiDeleteModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     *
     * @summary Gets the list of agent groups.
     * @param page The page index.
     * @param pageSize The page size. Page size can be any value between 1 and 200.
     */
    agentGroupsList(page?: number, pageSize?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AgentGroupsListApiResult;
    }>;
    /**
     *
     * @summary Creates a new agent group
     * @param model The new agent group model.
     */
    agentGroupsNew(model: AgentGroupApiNewModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AgentGroupModel;
    }>;
    /**
     *
     * @summary Updates the agent group
     * @param model
     */
    agentGroupsUpdate(model: AgentGroupApiUpdateModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AgentGroupModel;
    }>;
}
