/**
 * Netsparker Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http from 'http';
import { DeleteScanNotificationApiModel } from '../model/deleteScanNotificationApiModel';
import { NewScanNotificationApiModel } from '../model/newScanNotificationApiModel';
import { NotificationPriorityPair } from '../model/notificationPriorityPair';
import { ScanNotificationApiModel } from '../model/scanNotificationApiModel';
import { ScanNotificationListApiResult } from '../model/scanNotificationListApiResult';
import { ScanNotificationScanTaskGroupApiModel } from '../model/scanNotificationScanTaskGroupApiModel';
import { UpdateScanNotificationApiModel } from '../model/updateScanNotificationApiModel';
import { Authentication, Interceptor } from '../model/models';
export declare enum NotificationsApiApiKeys {
}
export declare class NotificationsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: NotificationsApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     *
     * @summary Deletes an existing scan notification definition.
     * @param model The new scan notification model.
     */
    notificationsDelete(model: DeleteScanNotificationApiModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     *
     * @summary Gets the notification.
     * @param id The identifier.
     */
    notificationsGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ScanNotificationApiModel;
    }>;
    /**
     *
     * @summary Gets the list of notifications grouped by their Scopes and ordered by priorities for the given event.
     * @param event The notification event.
     */
    notificationsGetPriorities(event: 'NewScan' | 'ScanCompleted' | 'ScanCancelled' | 'ScanFailed' | 'ScheduledScanLaunchFailed' | 'OutOfDateTechnology', options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ScanNotificationApiModel;
    }>;
    /**
     *
     * @summary Gets the scan groups of website.
     * @param websiteId The website Id.
     */
    notificationsGetScanGroups(websiteId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ScanNotificationScanTaskGroupApiModel;
    }>;
    /**
     *
     * @summary Gets the list of notifications.
     * @param page The page index.
     * @param pageSize The page size. Page size can be any value between 1 and 200.
     */
    notificationsList(page?: number, pageSize?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ScanNotificationListApiResult;
    }>;
    /**
     *
     * @summary Creates a new scan notification definition.
     * @param model The new scan notification model.
     */
    notificationsNew(model: NewScanNotificationApiModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ScanNotificationApiModel;
    }>;
    /**
     *
     * @summary Sets the priorities of notifications.
     * @param priorities The notification priority pairs.
     */
    notificationsSetPriorities(priorities: Array<NotificationPriorityPair>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     *
     * @summary Updates an existing scan notification definition.
     * @param model The new scan notification model.
     */
    notificationsUpdate(model: UpdateScanNotificationApiModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ScanNotificationApiModel;
    }>;
}
