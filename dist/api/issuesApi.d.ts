/**
 * Netsparker Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http from 'http';
import { IssueApiModel } from '../model/issueApiModel';
import { IssueApiResult } from '../model/issueApiResult';
import { IssueApiUpdateModel } from '../model/issueApiUpdateModel';
import { VulnerabilityContentApiModel } from '../model/vulnerabilityContentApiModel';
import { Authentication, Interceptor } from '../model/models';
export declare enum IssuesApiApiKeys {
}
export declare class IssuesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: IssuesApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     *
     * @summary Gets the list of addressed issues.
     * @param severity The vulnerability severity
     * @param webSiteName The website\&#39;s name.
     * @param websiteGroupName The website group\&#39;s name.
     * @param page The page size.
     * @param pageSize The page size. Page size can be any value between 1 and 200.
     */
    issuesAddressedIssues(severity?: 'BestPractice' | 'Information' | 'Low' | 'Medium' | 'High' | 'Critical', webSiteName?: string, websiteGroupName?: string, page?: number, pageSize?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: IssueApiResult;
    }>;
    /**
     *
     * @summary Gets the list of all issues.
     * @param severity The vulnerability severity
     * @param webSiteName The website\&#39;s name.
     * @param websiteGroupName The website group\&#39;s name.
     * @param page The page size.
     * @param pageSize The page size. Page size can be any value between 1 and 200.
     * @param sortType Sort by ascending and descending according to LastSeenDate. Default parameter ascending.
     * @param lastSeenDate You can use the date format defined in your account. You can visit /account/changesettings to view the current format.
     * @param rawDetails If you want the vulnerability data response(Remedy, Description etc.) to return without raw html, this field must be set false.
     */
    issuesAllIssues(severity?: 'BestPractice' | 'Information' | 'Low' | 'Medium' | 'High' | 'Critical', webSiteName?: string, websiteGroupName?: string, page?: number, pageSize?: number, sortType?: 'Ascending' | 'Descending', lastSeenDate?: string, rawDetails?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: IssueApiResult;
    }>;
    /**
     *
     * @summary Gets issues by id. Returns with encoded(raw html) vulnerability template data by default.
     * @param id id.
     */
    issuesGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: IssueApiModel;
    }>;
    /**
     *
     * @summary Gets vulnerability request/response content by id.
     * @param id id.
     */
    issuesGetVulnerabilityContent(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: VulnerabilityContentApiModel;
    }>;
    /**
     *
     * @summary Returns the report of issues in the csv format.
     * @param csvSeparator Gets or sets the csv separator.
     * @param severity Gets or sets the vulnerability\&#39;s severity.
     * @param websiteGroupName Gets or sets the website group\&#39;s name.
     * @param webSiteName Gets or sets the website\&#39;s name.
     */
    issuesReport(csvSeparator?: 'Comma' | 'Semicolon' | 'Pipe' | 'Tab', severity?: 'BestPractice' | 'Information' | 'Low' | 'Medium' | 'High' | 'Critical', websiteGroupName?: string, webSiteName?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     *
     * @summary Gets the list of to-do issues.
     * @param severity The vulnerability severity
     * @param webSiteName The website\&#39;s name.
     * @param websiteGroupName The website group\&#39;s name.
     * @param page The page size.
     * @param pageSize The page size. Page size can be any value between 1 and 200.
     */
    issuesTodo(severity?: 'BestPractice' | 'Information' | 'Low' | 'Medium' | 'High' | 'Critical', webSiteName?: string, websiteGroupName?: string, page?: number, pageSize?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: IssueApiResult;
    }>;
    /**
     *
     * @summary Updates an existing issue.
     * @param model Issue model to update. Except IssueId, all parameters are optional but at least 1 parameter is required.              To reset status send \&quot;State\&quot;:Â \&quot;Default\&quot;
     */
    issuesUpdate(model: IssueApiUpdateModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     *
     * @summary Gets the list of retest issues.
     * @param severity The vulnerability severity
     * @param webSiteName The website\&#39;s name.
     * @param websiteGroupName The website group\&#39;s name.
     * @param page The page size.
     * @param pageSize The page size. Page size can be any value between 1 and 200.
     */
    issuesWaitingForRetest(severity?: 'BestPractice' | 'Information' | 'Low' | 'Medium' | 'High' | 'Critical', webSiteName?: string, websiteGroupName?: string, page?: number, pageSize?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: IssueApiResult;
    }>;
}
