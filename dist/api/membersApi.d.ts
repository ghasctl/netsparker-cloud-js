/**
 * Netsparker Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http from 'http';
import { MemberApiModelListApiResult } from '../model/memberApiModelListApiResult';
import { MemberApiViewModel } from '../model/memberApiViewModel';
import { MemberInvitationApiModelListApiResult } from '../model/memberInvitationApiModelListApiResult';
import { MemberInvitationApiViewModel } from '../model/memberInvitationApiViewModel';
import { NewMemberApiModel } from '../model/newMemberApiModel';
import { NewMemberInvitationApiModel } from '../model/newMemberInvitationApiModel';
import { TimezoneApiModel } from '../model/timezoneApiModel';
import { UpdateMemberApiModel } from '../model/updateMemberApiModel';
import { UserApiTokenModel } from '../model/userApiTokenModel';
import { Authentication, Interceptor } from '../model/models';
export declare enum MembersApiApiKeys {
}
export declare class MembersApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: MembersApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     *
     * @summary Deletes a member
     * @param id Member id
     */
    membersDelete(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     *
     * @summary Deletes member invitation
     * @param email Invitation email
     */
    membersDeleteInvitation(email: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     *
     * @summary Gets the member by the specified id.
     * @param id Member id
     */
    membersGet(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MemberApiViewModel;
    }>;
    /**
     *
     * @summary Gets user api token.
     * @param email User email address.
     */
    membersGetApiToken(email: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserApiTokenModel;
    }>;
    /**
     *
     * @summary Gets user by email.
     * @param email The email address of the user.
     */
    membersGetByEmail(email: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MemberApiViewModel;
    }>;
    /**
     *
     * @summary Gets the member invitation by the specified id.
     * @param invitationId The invitation identifier
     */
    membersGetInvitation(invitationId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MemberInvitationApiViewModel;
    }>;
    /**
     *
     * @summary Gets a list all of the time zones.
     */
    membersGetTimezones(options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TimezoneApiModel;
    }>;
    /**
     *
     * @summary Gets the list of members.
     * @param page The page index.
     * @param pageSize The page size. Page size can be any value between 1 and 200.
     */
    membersInvitationList(page?: number, pageSize?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MemberInvitationApiModelListApiResult;
    }>;
    /**
     *
     * @summary Gets the list of members.
     * @param page The page index.
     * @param pageSize The page size. Page size can be any value between 1 and 200.
     */
    membersList(page?: number, pageSize?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MemberApiModelListApiResult;
    }>;
    /**
     *
     * @summary Creates a new member.
     * @param model Model of the member
     */
    membersNew(model: NewMemberApiModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MemberApiViewModel;
    }>;
    /**
     *
     * @summary Creates a new member invitation
     * @param model Model of the member
     */
    membersNewInvitation(model: NewMemberInvitationApiModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     *
     * @summary Sends member invitation email
     * @param invitationId invitation Id
     */
    membersSendInvitationEmail(invitationId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     *
     * @summary Updates a member
     * @param model Model of the member
     */
    membersUpdate(model: UpdateMemberApiModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MemberApiViewModel;
    }>;
}
