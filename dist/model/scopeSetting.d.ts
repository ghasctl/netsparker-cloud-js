/**
 * Netsparker Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ExcludedLinkModel } from './excludedLinkModel';
import { ExcludedUsageTrackerModel } from './excludedUsageTrackerModel';
/**
* Represents a class that carries out scope settings.
*/
export declare class ScopeSetting {
    /**
    * Gets or sets the excluded links.
    */
    'excludedLinks'?: Array<ExcludedLinkModel>;
    /**
    * Gets or sets a value indicating whether links should be excluded/included.
    */
    'excludeLinks'?: boolean;
    /**
    * Gets or sets the excluded usage trackers.
    */
    'excludedUsageTrackers'?: Array<ExcludedUsageTrackerModel>;
    /**
    * Specifies whether the authentication related pages like login, logout etc. should be excluded from the scan..
    */
    'excludeAuthenticationPages'?: boolean;
    /**
    * Gets or sets the disallowed http methods.
    */
    'disallowedHttpMethods'?: Array<ScopeSetting.DisallowedHttpMethodsEnum>;
    /**
    * Gets or sets the scan scope.
    */
    'scope'?: ScopeSetting.ScopeEnum;
    /**
    * Gets or sets a value indicating whether http and https protocols are differentiated.
    */
    'doNotDifferentiateProtocols'?: boolean;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace ScopeSetting {
    enum DisallowedHttpMethodsEnum {
        Get,
        Post,
        Connect,
        Head,
        Trace,
        Debug,
        Track,
        Put,
        Options,
        Delete,
        Link,
        Unlink,
        Patch
    }
    enum ScopeEnum {
        EnteredPathAndBelow,
        OnlyEnteredUrl,
        WholeDomain
    }
}
