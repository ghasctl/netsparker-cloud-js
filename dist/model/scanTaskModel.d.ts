/**
 * Netsparker Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AdditionalWebsiteModel } from './additionalWebsiteModel';
import { PciScanTaskViewModel } from './pciScanTaskViewModel';
import { ReducedScanTaskProfile } from './reducedScanTaskProfile';
import { ScanTimeWindowModel } from './scanTimeWindowModel';
import { UrlRewriteExcludedPathModel } from './urlRewriteExcludedPathModel';
import { UrlRewriteRuleModel } from './urlRewriteRuleModel';
import { VcsCommitInfo } from './vcsCommitInfo';
/**
* Represents a model for carrying {Invicti.Cloud.Core.Models.ScanTask} content.
*/
export declare class ScanTaskModel {
    /**
    * Gets or sets the additional websites to scan.
    */
    'additionalWebsites'?: Array<AdditionalWebsiteModel>;
    /**
    * Gets or sets the agent id.
    */
    'agentId'?: string;
    /**
    * Gets or sets the agent name.
    */
    'agentName'?: string;
    /**
    * Gets or sets the cookies.
    */
    'cookies'?: string;
    /**
    * Gets or sets a value indicating whether parallel attacker is enabled.
    */
    'crawlAndAttack'?: boolean;
    /**
    * Gets or sets a value indicating whether Heuristic URL Rewrite support is enabled together with custom URL Rewrite  support.
    */
    'enableHeuristicChecksInCustomUrlRewrite'?: boolean;
    /**
    * Gets or sets the excluded links.
    */
    'excludedLinks'?: string;
    /**
    * Gets or sets a value indicating whether links should be excluded/included.
    */
    'excludeLinks'?: boolean;
    /**
    * Gets or sets the disallowed HTTP methods.
    */
    'disallowedHttpMethods'?: string;
    /**
    * Gets or sets a value indicating whether automatic crawling is enabled.
    */
    'findAndFollowNewLinks'?: boolean;
    /**
    * Gets or sets the imported links.
    */
    'importedLinks'?: string;
    /**
    * Gets the desktop scan identifier.
    */
    'desktopScanId'?: string;
    /**
    * Gets or sets initiated date in user\'s preferred format.
    */
    'initiatedTime'?: string;
    /**
    * Gets or sets the initiated date in user\'s preferred format.
    */
    'initiatedDate'?: string;
    /**
    * Gets or sets the initiated date.
    */
    'initiatedAt'?: Date;
    /**
    * Gets or sets the root path maximum dynamic signatures for heuristic URL Rewrite detection.
    */
    'maxDynamicSignatures'?: number;
    /**
    * Gets or sets the maximum duration of the scan in hours.
    */
    'maxScanDuration'?: number;
    /**
    * Gets or sets the duration
    */
    'duration'?: string;
    /**
    * Gets or sets the description of the policy.
    */
    'policyDescription'?: string;
    /**
    * Gets or sets the foreign key reference to the related Policy instance.
    */
    'policyId'?: string;
    /**
    * Gets or sets the name of the policy.
    */
    'policyName'?: string;
    /**
    * Gets or sets the foreign key reference to the related Authentication Profile instance.
    */
    'authenticationProfileId'?: string;
    /**
    * Gets or sets the the authentication profile option.
    */
    'authenticationProfileOption'?: ScanTaskModel.AuthenticationProfileOptionEnum;
    /**
    * Gets or sets the description of the report policy.
    */
    'reportPolicyDescription'?: string;
    /**
    * Gets or sets the foreign key reference to the related {Invicti.Cloud.Core.Models.ReportPolicySetting} instance.
    */
    'reportPolicyId'?: string;
    /**
    * Gets or sets the name of the report policy.
    */
    'reportPolicyName'?: string;
    /**
    * Gets or sets the scan scope.
    */
    'scope'?: ScanTaskModel.ScopeEnum;
    /**
    * Gets or sets the sub path maximum dynamic signatures for heuristic URL Rewrite detection.
    */
    'subPathMaxDynamicSignatures'?: number;
    /**
    * Gets or sets target path.
    */
    'targetPath'?: string;
    /**
    * Gets or sets TargetUrl.
    */
    'targetUrl'?: string;
    /**
    * Gets or sets the target URL root.
    */
    'targetUrlRoot'?: string;
    'timeWindow'?: ScanTimeWindowModel;
    /**
    * Gets or sets the total vulnerability count without information vulnerabilities.
    */
    'totalVulnerabilityCount'?: number;
    /**
    * Gets or sets the extensions that will be analyzed for heuristic URL Rewrite detection.
    */
    'urlRewriteAnalyzableExtensions'?: string;
    /**
    * Gets or sets the block separators for heuristic URL Rewrite detection.
    */
    'urlRewriteBlockSeparators'?: string;
    /**
    * Gets or sets the URL Rewrite mode.
    */
    'urlRewriteMode'?: ScanTaskModel.UrlRewriteModeEnum;
    /**
    * Gets or sets the URL Rewrite rules.
    */
    'urlRewriteRules'?: Array<UrlRewriteRuleModel>;
    /**
    * Gets or sets the URL rewrite excluded links.
    */
    'urlRewriteExcludedLinks'?: Array<UrlRewriteExcludedPathModel>;
    /**
    * Gets or sets the user identifier.
    */
    'userId'?: string;
    'vcsCommitInfo'?: VcsCommitInfo;
    /**
    * Gets or sets the name of the website.
    */
    'websiteName'?: string;
    /**
    * Gets or sets the website URL.
    */
    'websiteUrl'?: string;
    /**
    * Gets or sets the description of the website.
    */
    'websiteDescription'?: string;
    /**
    * Gets or sets the pci scan task is enabled.
    */
    'enablePciScanTask'?: boolean;
    'pciScanTask'?: PciScanTaskViewModel;
    /**
    * Gets or sets the user\'s name.
    */
    'userName'?: string;
    /**
    * Determines whether if the scan task model has initiated queued scan.
    */
    'queuedScanTaskExist'?: boolean;
    /**
    * Gets or sets the scan task profile id
    */
    'scanTaskProfileId'?: string;
    'scanTaskProfile'?: ReducedScanTaskProfile;
    /**
    * Gets or sets the number of steps (HTTP requests) completed thus far.
    */
    'completedSteps'?: number;
    /**
    * Gets or sets the estimated launch time in minutes for queued scans.
    */
    'estimatedLaunchTime'?: number;
    /**
    * Gets or sets the estimated total number of steps (HTTP requests) that this scan will undertake.
    */
    'estimatedSteps'?: number;
    /**
    * Gets or sets FailureReason
    */
    'failureReason'?: ScanTaskModel.FailureReasonEnum;
    /**
    * Gets the failure reason description.
    */
    'failureReasonDescription'?: string;
    /**
    * Gets the failure reason string.
    */
    'failureReasonString'?: string;
    /**
    * Gets or sets the global threat level.
    */
    'globalThreatLevel'?: ScanTaskModel.GlobalThreatLevelEnum;
    /**
    * Gets the global vulnerability critical count.
    */
    'globalVulnerabilityCriticalCount'?: number;
    /**
    * Gets the global vulnerability high count.
    */
    'globalVulnerabilityHighCount'?: number;
    /**
    * Gets the global vulnerability information count.
    */
    'globalVulnerabilityInfoCount'?: number;
    /**
    * Gets the global vulnerability information count.
    */
    'globalVulnerabilityBestPracticeCount'?: number;
    /**
    * Gets the global vulnerability low count.
    */
    'globalVulnerabilityLowCount'?: number;
    /**
    * Gets the global vulnerability medium count.
    */
    'globalVulnerabilityMediumCount'?: number;
    /**
    * Gets or sets Id.
    */
    'id'?: string;
    /**
    * Gets a value indicating whether scan is completed  with any state.
    */
    'isCompleted'?: boolean;
    /**
    * Gets the completed percentage.
    */
    'percentage'?: number;
    /**
    * Gets or sets the Phase.
    */
    'phase'?: ScanTaskModel.PhaseEnum;
    /**
    * Gets or sets the scan group identifier.
    */
    'scanTaskGroupId'?: string;
    /**
    * Gets or sets the type of the scan.
    */
    'scanType'?: ScanTaskModel.ScanTypeEnum;
    /**
    * Gets or sets the scheduled scan identifier.
    */
    'scheduledScanId'?: string;
    /**
    * Gets or sets State.
    */
    'state'?: ScanTaskModel.StateEnum;
    /**
    * Gets or sets the date and time at which this task state was last changed.
    */
    'stateChanged'?: Date;
    /**
    * Gets or sets the threat level.
    */
    'threatLevel'?: ScanTaskModel.ThreatLevelEnum;
    /**
    * Gets or sets the count of vulnerabilities with critical level severity.
    */
    'vulnerabilityCriticalCount'?: number;
    /**
    * Gets or sets the count of vulnerabilities with high level severity.
    */
    'vulnerabilityHighCount'?: number;
    /**
    * Gets or sets the count of vulnerabilities with information level severity.
    */
    'vulnerabilityInfoCount'?: number;
    /**
    * Gets or sets the count of vulnerabilities with best practice level severity.
    */
    'vulnerabilityBestPracticeCount'?: number;
    /**
    * Gets or sets the count of vulnerabilities with low level severity.
    */
    'vulnerabilityLowCount'?: number;
    /**
    * Gets or sets the count of vulnerabilities with medium level severity.
    */
    'vulnerabilityMediumCount'?: number;
    /**
    * Gets the website identifier.
    */
    'websiteId'?: string;
    /**
    * Date and time at which this task was initiated.
    */
    'initiated'?: Date;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace ScanTaskModel {
    enum AuthenticationProfileOptionEnum {
        DontUse,
        UseMatchedProfile,
        SelectedProfile
    }
    enum ScopeEnum {
        EnteredPathAndBelow,
        OnlyEnteredUrl,
        WholeDomain
    }
    enum UrlRewriteModeEnum {
        None,
        Heuristic,
        Custom
    }
    enum FailureReasonEnum {
        NameResolutionFailure,
        HostUnavailable,
        ProxyFailure,
        UnableToLoadScanSession,
        AgentNotAvailable,
        ScanNotAllowed,
        MaxLogoutExceeded,
        TargetLinkTimeoutDetected,
        LoginFailed,
        UnableToFindAutoSaveNdb,
        ScanPolicyNotFound,
        ReportPolicyNotFound,
        ErrorOccurredOnScanFailed,
        ErrorOccurredOnPause,
        ErrorOccurredOnCancel,
        ErrorOccurredOnScanCompleted,
        SevenZipNotFoundOrInstalled
    }
    enum GlobalThreatLevelEnum {
        Unknown,
        Secure,
        NeedsAttention,
        Insecure,
        Critical
    }
    enum PhaseEnum {
        Pending,
        Crawling,
        CrawlingAndAttacking,
        Attacking,
        ReCrawling,
        Complete
    }
    enum ScanTypeEnum {
        Full,
        Retest,
        Incremental
    }
    enum StateEnum {
        Queued,
        Scanning,
        Archiving,
        Complete,
        Failed,
        Cancelled,
        Delayed,
        Pausing,
        Paused,
        Resuming
    }
    enum ThreatLevelEnum {
        Unknown,
        Secure,
        NeedsAttention,
        Insecure,
        Critical
    }
}
