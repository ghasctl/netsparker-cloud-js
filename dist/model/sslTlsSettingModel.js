"use strict";
/**
 * Netsparker Enterprise API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SslTlsSettingModel = void 0;
/**
* Represents SSL/TLS settings.
*/
class SslTlsSettingModel {
    static getAttributeTypeMap() {
        return SslTlsSettingModel.attributeTypeMap;
    }
}
exports.SslTlsSettingModel = SslTlsSettingModel;
SslTlsSettingModel.discriminator = undefined;
SslTlsSettingModel.attributeTypeMap = [
    {
        "name": "externalDomainInvalidCertificateAction",
        "baseName": "ExternalDomainInvalidCertificateAction",
        "type": "SslTlsSettingModel.ExternalDomainInvalidCertificateActionEnum"
    },
    {
        "name": "ssl3Enabled",
        "baseName": "Ssl3Enabled",
        "type": "boolean"
    },
    {
        "name": "targetUrlInvalidCertificateAction",
        "baseName": "TargetUrlInvalidCertificateAction",
        "type": "SslTlsSettingModel.TargetUrlInvalidCertificateActionEnum"
    },
    {
        "name": "tls10Enabled",
        "baseName": "Tls10Enabled",
        "type": "boolean"
    },
    {
        "name": "tls11Enabled",
        "baseName": "Tls11Enabled",
        "type": "boolean"
    },
    {
        "name": "tls12Enabled",
        "baseName": "Tls12Enabled",
        "type": "boolean"
    }
];
(function (SslTlsSettingModel) {
    let ExternalDomainInvalidCertificateActionEnum;
    (function (ExternalDomainInvalidCertificateActionEnum) {
        ExternalDomainInvalidCertificateActionEnum[ExternalDomainInvalidCertificateActionEnum["Ignore"] = 'Ignore'] = "Ignore";
        ExternalDomainInvalidCertificateActionEnum[ExternalDomainInvalidCertificateActionEnum["Reject"] = 'Reject'] = "Reject";
    })(ExternalDomainInvalidCertificateActionEnum = SslTlsSettingModel.ExternalDomainInvalidCertificateActionEnum || (SslTlsSettingModel.ExternalDomainInvalidCertificateActionEnum = {}));
    let TargetUrlInvalidCertificateActionEnum;
    (function (TargetUrlInvalidCertificateActionEnum) {
        TargetUrlInvalidCertificateActionEnum[TargetUrlInvalidCertificateActionEnum["Ignore"] = 'Ignore'] = "Ignore";
        TargetUrlInvalidCertificateActionEnum[TargetUrlInvalidCertificateActionEnum["Reject"] = 'Reject'] = "Reject";
    })(TargetUrlInvalidCertificateActionEnum = SslTlsSettingModel.TargetUrlInvalidCertificateActionEnum || (SslTlsSettingModel.TargetUrlInvalidCertificateActionEnum = {}));
})(SslTlsSettingModel = exports.SslTlsSettingModel || (exports.SslTlsSettingModel = {}));
//# sourceMappingURL=sslTlsSettingModel.js.map